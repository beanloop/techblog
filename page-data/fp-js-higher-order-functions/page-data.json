{"componentChunkName":"component---src-templates-blog-post-js","path":"/fp-js-higher-order-functions/","result":{"data":{"site":{"siteMetadata":{"title":"Beanloop Tech Blog","author":"Beanloop"}},"markdownRemark":{"id":"b0eda5c9-cea7-5480-90ee-967a5ad16adc","excerpt":"Higher-order functions, you’ve probably heard the term before. At first glance, it might sound scary, but don’t worry.\nIf you’ve been coding javascript for a…","html":"<p>Higher-order functions, you’ve probably heard the term before. At first glance, it might sound scary, but don’t worry.\nIf you’ve been coding javascript for a while, you’ve probably used them many times!</p>\n<h2>Functional programming</h2>\n<p>Before we start examining what a higher-order function is, let’s take a step back and look at where they come from - functional programming.\nFunctional programming is one of many other programming paradigms (you might have heard of Object-Oriented Programming). Functional programming is a way of programming where you tell the computer <strong>what</strong> your program does, instead of\n<strong>how</strong>. It also emphasizes immutability, and treats functions as “first-class citizens”.</p>\n<p>So what is a “first-class citizen” in programming, you might ask yourself?\nWell, turns out that first-class citizens are a special group of entities that enjoys some particular right and privileges:</p>\n<ol>\n<li>They can be stored in variables</li>\n<li>They can be passed as an argument to other procedures</li>\n<li>They can be returned as values from other procedures</li>\n<li>They can be incorporated into data structures</li>\n</ol>\n<p>Take a good look at numbers 2 and 3, and remember those two.</p>\n<p>This programming paradigm has many other characteristics, but that is a topic for another blog post.</p>\n<p>Javascript has some characteristics of a functional programming language, one of those being that it treats functions as guess what?\nThat’s right, first-class citizens!</p>\n<h2>Higher-order functions</h2>\n<p>Remember numbers 2 and 3 from the list above? Well, those two describe a higher-order function (in our case, a procedure is another function).\nPutting it in words, a higher-order function is a function that does one or both of these:</p>\n<ul>\n<li>It can take other functions as arguments</li>\n<li>It can return other functions as arguments.</li>\n</ul>\n<p>Having support for higher-order functions opens a world of possibilities, such as currying, partial application, function composition. These are topics for other blog posts though.</p>\n<h3>Returning functions</h3>\n<p>By now, you have read the word “function” about 20 times, but haven’t seen a single one. Where is the action you might ask? Well, ask and you shall receive.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">y</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> y</code></pre></div>\n<p>This might look weird if you are not familiar with arrow functions, so let’s take a look at them with the <code class=\"language-text\">function</code> keyword.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let’s examine this and see what’s going on. First, we declare a function named <code class=\"language-text\">add</code>. It takes one argument, <code class=\"language-text\">x</code>, which is a number. Second, we return (remember, first-class citizen) another function - an anonymous one, which takes a parameter <code class=\"language-text\">y</code>, which is also a number. Lastly, the function that we have returned adds <code class=\"language-text\">x</code> and <code class=\"language-text\">y</code> together, returning the sum of them.</p>\n<p>Now that we know how our <code class=\"language-text\">add</code> function works, let’s put it to use. We are now going to use our rights as first-class citizens and store functions in variables. Let’s use our <code class=\"language-text\">add</code> function to make a really useful function that adds the number 42 to another number.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> add42 <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Great, so now we have a new function called <code class=\"language-text\">add42</code> (someone quick make an npm package out of it!) that will add the number 42 to any given number passed in. This is the anonymous function we returned doing the work, stored in a variable. It remembers the number 42 passed into the <code class=\"language-text\">x</code> variable, and when invoked, adds it to the <code class=\"language-text\">y</code> variable. We can now use it like any other function</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">add42</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 52</span></code></pre></div>\n<p>We can even use our higher-order <code class=\"language-text\">add</code> function to make other “adders” that work independently from each other.\nThis technique is called <a href=\"https://en.wikipedia.org/wiki/Currying\">currying</a> and deserves a blog post of its own in the future.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> add2 <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> add3 <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> add9000 <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">9000</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">add2</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 42</span>\n<span class=\"token function\">add3</span><span class=\"token punctuation\">(</span><span class=\"token number\">39</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 42</span>\n\n<span class=\"token function\">add9000</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Over 9000</span></code></pre></div>\n<p>Using functions this way lets us define a template so we can create multiple new useful functions, each having the same base but different behaviors.</p>\n<h3>Functions as arguments</h3>\n<p>So, now that you know how to return functions from other functions, let’s take a look at how we can pass functions as an argument to other functions.</p>\n<p>For this example, let’s build a small function that works much like an <code class=\"language-text\">ifThen</code> statement. This function should take a boolean <code class=\"language-text\">condition</code> and a function <code class=\"language-text\">ifTrue</code>, that only runs if the <code class=\"language-text\">condition</code> is true.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">ifThen</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">condition<span class=\"token punctuation\">,</span> ifTrue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ifTrue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">ifThen</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Was true!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// outputs 'Was true!'</span>\n<span class=\"token function\">ifThen</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Was true!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// outputs nothing</span></code></pre></div>\n<p>If you have programmed in javascript for a while, especially node, this will probably be familiar to you. These functions are called <code class=\"language-text\">callbacks</code> and were (and sometimes still are) used in asynchronous functions. They can, however, be used in synchronous functions aswell! An example of a synchronous higher-order function is <code class=\"language-text\">addEventListener</code>, as it takes the function to execute for the event as the second argument.</p>\n<p>Let’s take a look at the example and see what’s going on. The first part with the <code class=\"language-text\">if</code> statement should be pretty clear, we pass in a <code class=\"language-text\">boolean</code> condition and check if it’s true. If that’s the case, we call the second parameter, <code class=\"language-text\">ifTrue</code> (remember, it’s a function).</p>\n<p>Let’s add an <code class=\"language-text\">orElse</code> that will run if the <code class=\"language-text\">condition</code> is false.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">ifThen</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">condition<span class=\"token punctuation\">,</span> ifTrue<span class=\"token punctuation\">,</span> orElse</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ifTrue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">ifThen</span><span class=\"token punctuation\">(</span>\n  <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Was true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Was false\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Outputs 'Was true'</span>\n<span class=\"token function\">ifThen</span><span class=\"token punctuation\">(</span>\n  <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Was true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Was false\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Outputs 'Was false'</span></code></pre></div>\n<h2>Example of built-in higher-order functions</h2>\n<p>Remember when I said that even if you had not heard about higher-order functions before reading this, you had probably already used them anyway. Well, it turns out that javascript has some built-in higher-order functions that operate on arrays. Let’s take a look at 3 of them, and why you should use them instead of regular loops.</p>\n<h3>Array.prototype.map</h3>\n<p><code class=\"language-text\">Array.prototype.map</code> is a function that takes a callback function and runs it over each element in the array, returning a new array. It’s great for transforming the values of an array without mutating them.</p>\n<p>Let’s say you have a shopping cart with some items. These items have a <code class=\"language-text\">quantity</code> and an <code class=\"language-text\">itemPrice</code>, but for presentational purposes, you want to show the total price. Mapping the <code class=\"language-text\">products</code> array to a new one and adding a <code class=\"language-text\">totalPrice</code> property is a perfect usage of the <code class=\"language-text\">map</code> function.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> products <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Iphone 7\"</span><span class=\"token punctuation\">,</span>\n    quantity<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    itemPrice<span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Air Pods\"</span><span class=\"token punctuation\">,</span>\n    quantity<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    itemPrice<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Iphone 7 case\"</span><span class=\"token punctuation\">,</span>\n    quantity<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    itemPrice<span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">addTotalPriceToProduct</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">product</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>product<span class=\"token punctuation\">,</span>\n    totalPrice<span class=\"token operator\">:</span> product<span class=\"token punctuation\">.</span>itemPrice <span class=\"token operator\">*</span> product<span class=\"token punctuation\">.</span>quantity<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> productsWithTotalPrice <span class=\"token operator\">=</span> products<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>addTotalPriceToProduct<span class=\"token punctuation\">)</span></code></pre></div>\n<p>We declare a function, <code class=\"language-text\">addTotalPriceToProduct</code>, that takes a product and returns a new object that contains the same properties, plus a new one called <code class=\"language-text\">totalPrice</code>.</p>\n<p>Next, we pass it into the <code class=\"language-text\">map</code> function that will run for every item in the product array. This can also be done inline:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> productsWithTotalPrice <span class=\"token operator\">=</span> products<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>item<span class=\"token punctuation\">,</span>\n  totalPrice<span class=\"token operator\">:</span> p<span class=\"token punctuation\">.</span>itemPrice <span class=\"token operator\">*</span> p<span class=\"token punctuation\">.</span>quantity<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The result is a new array containing our products and their total price.</p>\n<p>Compare the above to the imperative version below:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> products <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> products<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  products<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>products<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    totalPrice<span class=\"token operator\">:</span> products<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>itemPrice <span class=\"token operator\">*</span> products<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>quantity<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice, how our solution using higher-order function reads more like spoken language, compared to the solution using for loops that reads more like step by step instructions.</p>\n<p>In the solution using the higher-order function <code class=\"language-text\">map</code>, the implementation details of the looping and pushing to a new array is abstracted away from us, letting us focusing at the problems on a higher level (i.e how we create the new object, instead of focusing on the looping and pushing to a new array).</p>\n<p>Which one do you think is easier to grasp at a first glance?</p>\n<p>As a bonus, here is how you could implement your own <code class=\"language-text\">map</code> functions using good ol’ imperative javascript (don’t do that in your projects, use the built-in function).</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> mapper</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    newArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">mapper</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> newArray<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [2, 4, 6, 8]</span></code></pre></div>\n<h3>Array.prototype.filter</h3>\n<p><code class=\"language-text\">Array.prototype.filter</code> is, just like <code class=\"language-text\">Array.prototype.map</code>, another very useful higher-order function that exists on arrays. Much like <code class=\"language-text\">map</code>, the passed-in function will run for every element in the array. And just like <code class=\"language-text\">map</code>, this function returns a new array. Unlike map, however, we do not return a new object here. Instead, we return a boolean - <code class=\"language-text\">true</code> if the current element should be included in the new array, and <code class=\"language-text\">false</code> if not.</p>\n<p>For example, say we have a pretty dashboard, full of beautiful graphs that display meaningful data. Let’s make it a line chart, that displays multiple lines, and we want to have the ability to toggle certain lines on and off.</p>\n<p>The data could look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> veryImportantData <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'Impressions'</span><span class=\"token punctuation\">,</span> visible<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'Clicks'</span><span class=\"token punctuation\">,</span> visible<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'PageViews'</span><span class=\"token punctuation\">,</span> visible<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>We have already built a function using our newfound knowledge of <code class=\"language-text\">map</code> to toggle the <code class=\"language-text\">visible</code> state on and off for a line, but now we need to grab only the lines that have <code class=\"language-text\">visible: true</code>, and send them into our chart for presentation. This is where <code class=\"language-text\">filter</code> comes in handy!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">isLineVisible</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">line</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> line<span class=\"token punctuation\">.</span>visible\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> dataToPresent <span class=\"token operator\">=</span> veryImportantData<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>isLineVisible<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Or, we could do it inline with an anonymous function on one line!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> dataToPresent <span class=\"token operator\">=</span> veryImportantData<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">line</span> <span class=\"token operator\">=></span> line<span class=\"token punctuation\">.</span>visible<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Which gives us a new array with only the lines that had <code class=\"language-text\">visible: true</code>. The rest have been filtered out. Pretty great, right?</p>\n<p>Compare this to an approach using <code class=\"language-text\">for</code> loops:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> dataToPresent <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> veryImportantData<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>veryImportantData<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>visible<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    dataToPresent<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>veryImportantData<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Once again, the higher-order function version is easier to grasp, and we don’t need to care about how the loop is working, or how the array is created. It’s all abstracted away from us, focusing on the important part - filtering logic.</p>\n<h3>Array.prototype.reduce</h3>\n<p><code class=\"language-text\">Array.prototype.reduce</code>, while very useful, is a bit harder to grasp than <code class=\"language-text\">Array.prototype.map</code> and <code class=\"language-text\">Array.prototype.filter</code>, it is very versatile, and can be used to build new objects, numbers, strings, or arrays.</p>\n<p>Just as the previous functions (<code class=\"language-text\">map</code>, <code class=\"language-text\">filter</code>), <code class=\"language-text\">reduce</code> takes a callback function - called a reducer function - as the first argument. However, this callback function has a slight difference from the functions passed to <code class=\"language-text\">map</code> and <code class=\"language-text\">filter</code>. It takes an <code class=\"language-text\">accumulator</code> as the first argument, and the element it’s currently operating (<code class=\"language-text\">currentValue</code>) on as the second. The <code class=\"language-text\">reduce</code> function also has a second argument, <code class=\"language-text\">initialValue</code>, which can be sent in to set the <code class=\"language-text\">accumulator</code> to have a value the first iteration. <code class=\"language-text\">reduce</code> is often referred to as <code class=\"language-text\">fold</code> withing other functional programming languages.</p>\n<p>Let’s look at an example - our shopping cart. Say you want to present the total price of the shopping cart. This is a handy use for reduce!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addProductPriceToTotal</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">total<span class=\"token punctuation\">,</span> product</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> total <span class=\"token operator\">+</span> product<span class=\"token punctuation\">.</span>totalPrice\n\n<span class=\"token keyword\">const</span> toalPrice <span class=\"token operator\">=</span> products\n  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>addTotalPriceToProduct<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>addProductPriceToTotal<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\ntotalPrice <span class=\"token comment\">// 1275</span></code></pre></div>\n<p>So, first, we run a map function on the products, adding totalPrice to each product. Secondly, we run the reduce function. Take a close look at the chaining. We can chain all these higher-order functions on the <code class=\"language-text\">Array</code> object, as long as the return a new array.</p>\n<p>Notice that we pass in <code class=\"language-text\">0</code> as the second argument? That’s us telling the <code class=\"language-text\">reduce</code> “Hey, the accumulator argument <code class=\"language-text\">total</code> should be <code class=\"language-text\">0</code> when our function runs the first time.</p>\n<p>When it runs our function on the second product, the <code class=\"language-text\">total</code> variable is <code class=\"language-text\">1000</code>. And so on. Let’s try to visualize it with a list:</p>\n<ol>\n<li>First run <code class=\"language-text\">total: 0</code>, <code class=\"language-text\">product.totalPrice: 1000</code>, returns <code class=\"language-text\">1000</code></li>\n<li>Second run <code class=\"language-text\">total: 1000</code>, <code class=\"language-text\">product.totalPrice: 200</code>, returns <code class=\"language-text\">1200</code></li>\n<li>Third run <code class=\"language-text\">total: 1200</code>, <code class=\"language-text\">product.totalPrice: 75</code>, returns <code class=\"language-text\">1275</code></li>\n</ol>\n<p>As you can see, each time we return something from the function passed to <code class=\"language-text\">reduce</code>, it gets sent into <code class=\"language-text\">total</code> the next pass, until it has run for every element in our array. That’s when <code class=\"language-text\">total</code> is assigned to our <code class=\"language-text\">totalPrice</code> variable. We now have a nice number representing the total price our shopping cart user has to pay us, sweet!</p>\n<p>Here is the imperative approach using a for-loop for comparison. Again, we need to deal with the looping ourselves, instead of just focusing on calculating the sum.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> products<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> productWithTotalPrice <span class=\"token operator\">=</span> <span class=\"token function\">addTotalPriceToProduct</span><span class=\"token punctuation\">(</span>products<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  sum <span class=\"token operator\">+=</span> productWithTotalPrice<span class=\"token punctuation\">.</span>totalPrice\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let’s take a look at another example, creating objects with reduce. Take our shopping cart again. Your backend developers have given you an endpoint to which you should send your shopping cart when the user wants to checkout. Thing is, they have designed it strangely due to various reasons. Instead of letting you send the products as an array, they want you to send it as an object that looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"products\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"1\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Iphone 7\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"quantity\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"price\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1000</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let’s also take a look at how the products array looks like since our short term memory is failing us.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> products <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Iphone 7\"</span><span class=\"token punctuation\">,</span>\n    quantity<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    itemPrice<span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Air Pods\"</span><span class=\"token punctuation\">,</span>\n    quantity<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    itemPrice<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Iphone 7 case\"</span><span class=\"token punctuation\">,</span>\n    quantity<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    itemPrice<span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>No problemo, <code class=\"language-text\">reduce</code> to the rescue.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> productsToSendToBackend <span class=\"token operator\">=</span> products<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">productsObject<span class=\"token punctuation\">,</span> product</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>productsObject<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>product<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> product<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n      quantity<span class=\"token operator\">:</span> product<span class=\"token punctuation\">.</span>quantity<span class=\"token punctuation\">,</span>\n      price<span class=\"token operator\">:</span> product<span class=\"token punctuation\">.</span>itemPrice<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> checkoutRequest <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  products<span class=\"token operator\">:</span> productsToSendToBackend<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>What’s going on here? Well, here we use reduce to build up our <code class=\"language-text\">products</code> object. In other words, we <strong>reduce</strong> the array to a single object.\nWe send an empty object, <code class=\"language-text\">{}</code> as the initial value. So, the first pass, our accumulator <code class=\"language-text\">productsObject</code> will be an empty object.\nWe then return a new object, copying all properties from the accumulator over via the object spread operator (<code class=\"language-text\">...</code>).\nThe first time this runs, it will merge together two empty objects.\nSecond, we create a new property on our return object, with the key set to the product id, using javascript dynamic object properties (<code class=\"language-text\">{[key]: value}</code>).\nLastly, we set this property to an object following our backend developers’ structure. Everyone is happy!</p>\n<h3>Reduce is versatile</h3>\n<p><code class=\"language-text\">reduce</code> is probably the most versatile of all higher-order functions built into the <code class=\"language-text\">Array</code> object. As you saw, it can be used to create numbers or objects. We can also use it to re-implement both the <code class=\"language-text\">map</code> and the <code class=\"language-text\">filter</code> function</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> mapFn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">accumulator<span class=\"token punctuation\">,</span> current</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>accumulator<span class=\"token punctuation\">,</span> <span class=\"token function\">mapFn</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> filterFn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">accumulator<span class=\"token punctuation\">,</span> current</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> temp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>accumulator<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">filterFn</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      temp<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> temp\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Beware of the index!</h3>\n<p>When using these built-in functions, there are some caveats, especially when using map.\nAs you’ve seen, callback functions sent to the <code class=\"language-text\">map</code> and <code class=\"language-text\">filter</code> takes the current element it’s operating on as the first argument, and <code class=\"language-text\">reduce</code> takes\nan accumulator and the current element. However, two more arguments are passed in, the current index and the array we are operating on (<code class=\"language-text\">currentIndex</code> and <code class=\"language-text\">array</code>)</p>\n<p>Here is the declaration for the <code class=\"language-text\">map</code> and <code class=\"language-text\">filter</code> functions.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>And for the <code class=\"language-text\">reduce</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">accumulator<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now, take for example this array</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"4\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Say you want to parse those strings to numbers. You could use <code class=\"language-text\">map</code> in combination with <code class=\"language-text\">parseInt</code> for this.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> parsed <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 2, 3, 4]</span></code></pre></div>\n<p>But you also want your code to be all tidy and nice, so you decide to just pass the <code class=\"language-text\">parseInt</code> directly to <code class=\"language-text\">map</code> since the <code class=\"language-text\">map</code> callback and the\n<code class=\"language-text\">parseInt</code> functions both take a number as their first argument.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> parsed <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>parseInt<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now, if you run this code, you will get this not so nice looking result</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">;</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>What is going on here? Well, remember the second argument to the callback function passed into <code class=\"language-text\">map</code>? Yeah, a number representing the current index of the element in our array. And what is the second argument to <code class=\"language-text\">parseInt</code>? Also a number! However, this argument is the <code class=\"language-text\">radix</code>, or <code class=\"language-text\">base</code> in which to parse the number. This is where we run into trouble! Here is what’s going on:</p>\n<ol>\n<li>First pass, will be translated to <code class=\"language-text\">parseInt(1, 0)</code>. 0 is not a valid base but <code class=\"language-text\">parseInt</code> will ignore this and parse it with base 10 since, you know, this is javascript.</li>\n<li>The second pass will be translated to <code class=\"language-text\">parseInt(2, 1)</code>. 1 is not a valid base, and this time, <code class=\"language-text\">parseInt</code> will not ignore this since, you know, this is javascript.</li>\n<li>The third pass will be translated to <code class=\"language-text\">parseInt(3, 2)</code>. Now, 2 is a valid base (binary numbers use this), but <code class=\"language-text\">3</code> is not a valid number in base 2.</li>\n</ol>\n<p>And so on.</p>\n<p>So, beware of this when using <code class=\"language-text\">map</code>, <code class=\"language-text\">filter</code>, <code class=\"language-text\">reduce</code> and passing the callback function directly like above when it’s type signature corresponds with the callback signature.</p>\n<h2>Other notable examples</h2>\n<p>There are many other higher-order functions built-in right to the language. We won’t dive any deeper into them, but here is a list of some that you probably will or already are using regularly.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I run after a second!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I run every second!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\nelement<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I run on clicks!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Writing our own higher-order function!</h2>\n<p>Now that you are somewhat familiar with higher-order functions, both those that can return functions and those that take functions as arguments, let’s try to build some of our own, useful higher-order functions!</p>\n<h3>Drying up code with higher-order functions</h3>\n<p>Let’s say you are building a parser for something. This parser needs to deal with lists of generic elements. These elements all share some properties in common but can differ a lot. Let’s also say that a property that they all share is <code class=\"language-text\">type</code>, that tells us what type of element this is. Before we can operate on an element, we need to assert the type of it, otherwise, our parser will blow up!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> elements <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> href<span class=\"token operator\">:</span> <span class=\"token string\">\"/checkout\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"div\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"p\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"span\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"blink\"</span><span class=\"token punctuation\">,</span> isBlinking<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"marquee\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"cthulu\"</span><span class=\"token punctuation\">,</span> isSleeping<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> href<span class=\"token operator\">:</span> <span class=\"token string\">\"/contact\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>So, we got our list of elements that we need to parse, now we have to build some functions that can assert what type they are so that we do not try to access properties that do not exist. One implementation of this could look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">isTypeA</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> element<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"a\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">isTypeDiv</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> element<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"div\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">isTypeCthulu</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> element<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"cthulu\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// And so on</span></code></pre></div>\n<p>It seems like we are repeating ourselves pretty much, almost all the functions look exactly the same. Definitely room for improvement.</p>\n<p>Now, remember the <code class=\"language-text\">add</code> example, where we made multiple “adders” with one function that returned another? Let’s apply the same principle here.</p>\n<p>First, we make a higher-order function, one that returns a new function. We want the returned function to assert that the element is of a certain type.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">makeTypeChecker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">checkType</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> element<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token comment\">// what exactly?</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The next step is to figure out what to check the type of the element against. Remember, that the inner function can remember arguments and variables from the outer function due to the outer functions containing scope. So, let’s pass in a string to check the type against.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">makeTypeChecker</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">checkType</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> element<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> type\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, we can put it all to use to make ourselves some type-checker functions for our parser.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> isTypeA <span class=\"token operator\">=</span> <span class=\"token function\">makeTypeChecker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> isTypeSpan <span class=\"token operator\">=</span> <span class=\"token function\">makeTypeChecker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"span\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> isTypeCthulu <span class=\"token operator\">=</span> <span class=\"token function\">makeTypeChecker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cthulu\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// wait, what?</span>\n\n<span class=\"token comment\">// And so on</span></code></pre></div>\n<p>Well, we are kind of repeating ourselves here as well, but not in the same way. And now, if we need to make a new type-checker function, we only have to write 1 line instead of 3. The winnings of this small example might not be that big, but imagine that the logic of <code class=\"language-text\">makeTypeChecker</code> is longer. This way is also less error-prone, since the logic for the type checking is contained in one place, instead of multiple functions (that you probably copy-pasted). If your first implementation contained a bug, and you have 10 different kinds of elements, that’s 10 places to fix the bug, instead of just one!</p>\n<h3>Using them for events on objects</h3>\n<p>We can use higher-order functions to broadcast certain events to the creator of an object. Let’s go back to the parser example. Say you build your awesome, well-abstracted parser. You are ready to package it nicely and let your fellow colleague (or npm users) use it. However, you want to give them some control over certain things, such as when an item fails to be parsed, or if your parser unexpectedly crashes out of the blue. Higher-order functions to the resuce!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createParser</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onItemParseFail<span class=\"token punctuation\">,</span> onParserError <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Your super awesome code!</span>\n\n  <span class=\"token comment\">// More awesome code!</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentLine<span class=\"token punctuation\">.</span>hasFailed <span class=\"token operator\">&amp;&amp;</span> onItemParseFail <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">onItemPraseFail</span><span class=\"token punctuation\">(</span>currentLine<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Parse even more!</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wholeThingFailed <span class=\"token operator\">&amp;&amp;</span> onPraserError <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">onParserError</span><span class=\"token punctuation\">(</span>veryThoughtOutError<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, the user of your parser can send in their own functions to do something when a line fails to parse, or when the whole thing unexpectedly breaks down, such as sending a message to slack or sending an email to everyone in the IT-team.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> parser <span class=\"token operator\">=</span> <span class=\"token function\">createParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">onItemParseFail</span><span class=\"token operator\">:</span> <span class=\"token parameter\">currentLine</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">sendMessageToSlack</span><span class=\"token punctuation\">(</span>\n      <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">AwesomeParser failed to parse: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">formatLine</span><span class=\"token punctuation\">(</span>currentLine<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">onItemParseFail</span><span class=\"token operator\">:</span> <span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">sendMessageToSlack</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">AwesomeParser crashed: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">formatError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">sendEmailToEveryone</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">AwesomeParser crashed: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">formatError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Wrap up</h2>\n<p>So, now you hopefully know how to use higher-order functions, and the benefits of them. If you’re already using them - great, use them and use them more. If not, go out into the world throwing and returning functions everywhere! Fingers crossed, you might not have to write a single <code class=\"language-text\">for</code> loop ever again!</p>","frontmatter":{"title":"Higher-order Functions in JavaScript","date":"February 25, 2020","description":"Learning and using higher-order functions in Javascript"},"fields":{"readingTime":{"text":"20 min read"}}}},"pageContext":{"slug":"/fp-js-higher-order-functions/","previous":null,"next":null}}}